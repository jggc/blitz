/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Le resultat complet d'une requete a votre index.
 */
public class QueryResponse implements org.apache.thrift.TBase<QueryResponse, QueryResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryResponse");

  private static final org.apache.thrift.protocol.TField FACETS_FIELD_DESC = new org.apache.thrift.protocol.TField("facets", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryResponseTupleSchemeFactory());
  }

  /**
   * Toutes les facets pour les resultats obtenus par la requete.
   * 
   * Voir la documentation du concours pour plus de details.
   */
  public List<FacetResult> facets; // required
  /**
   * Tous les resultats de la requete.
   * 
   * Les resultats doivent etre retournes dans le bon ordre.
   * Voir la documentation du concours pour plus de details.
   */
  public List<QueryResult> results; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Toutes les facets pour les resultats obtenus par la requete.
     * 
     * Voir la documentation du concours pour plus de details.
     */
    FACETS((short)1, "facets"),
    /**
     * Tous les resultats de la requete.
     * 
     * Les resultats doivent etre retournes dans le bon ordre.
     * Voir la documentation du concours pour plus de details.
     */
    RESULTS((short)2, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACETS
          return FACETS;
        case 2: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACETS, new org.apache.thrift.meta_data.FieldMetaData("facets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetResult.class))));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryResponse.class, metaDataMap);
  }

  public QueryResponse() {
  }

  public QueryResponse(
    List<FacetResult> facets,
    List<QueryResult> results)
  {
    this();
    this.facets = facets;
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryResponse(QueryResponse other) {
    if (other.isSetFacets()) {
      List<FacetResult> __this__facets = new ArrayList<FacetResult>();
      for (FacetResult other_element : other.facets) {
        __this__facets.add(new FacetResult(other_element));
      }
      this.facets = __this__facets;
    }
    if (other.isSetResults()) {
      List<QueryResult> __this__results = new ArrayList<QueryResult>();
      for (QueryResult other_element : other.results) {
        __this__results.add(new QueryResult(other_element));
      }
      this.results = __this__results;
    }
  }

  public QueryResponse deepCopy() {
    return new QueryResponse(this);
  }

  @Override
  public void clear() {
    this.facets = null;
    this.results = null;
  }

  public int getFacetsSize() {
    return (this.facets == null) ? 0 : this.facets.size();
  }

  public java.util.Iterator<FacetResult> getFacetsIterator() {
    return (this.facets == null) ? null : this.facets.iterator();
  }

  public void addToFacets(FacetResult elem) {
    if (this.facets == null) {
      this.facets = new ArrayList<FacetResult>();
    }
    this.facets.add(elem);
  }

  /**
   * Toutes les facets pour les resultats obtenus par la requete.
   * 
   * Voir la documentation du concours pour plus de details.
   */
  public List<FacetResult> getFacets() {
    return this.facets;
  }

  /**
   * Toutes les facets pour les resultats obtenus par la requete.
   * 
   * Voir la documentation du concours pour plus de details.
   */
  public QueryResponse setFacets(List<FacetResult> facets) {
    this.facets = facets;
    return this;
  }

  public void unsetFacets() {
    this.facets = null;
  }

  /** Returns true if field facets is set (has been assigned a value) and false otherwise */
  public boolean isSetFacets() {
    return this.facets != null;
  }

  public void setFacetsIsSet(boolean value) {
    if (!value) {
      this.facets = null;
    }
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<QueryResult> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(QueryResult elem) {
    if (this.results == null) {
      this.results = new ArrayList<QueryResult>();
    }
    this.results.add(elem);
  }

  /**
   * Tous les resultats de la requete.
   * 
   * Les resultats doivent etre retournes dans le bon ordre.
   * Voir la documentation du concours pour plus de details.
   */
  public List<QueryResult> getResults() {
    return this.results;
  }

  /**
   * Tous les resultats de la requete.
   * 
   * Les resultats doivent etre retournes dans le bon ordre.
   * Voir la documentation du concours pour plus de details.
   */
  public QueryResponse setResults(List<QueryResult> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FACETS:
      if (value == null) {
        unsetFacets();
      } else {
        setFacets((List<FacetResult>)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<QueryResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FACETS:
      return getFacets();

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FACETS:
      return isSetFacets();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryResponse)
      return this.equals((QueryResponse)that);
    return false;
  }

  public boolean equals(QueryResponse that) {
    if (that == null)
      return false;

    boolean this_present_facets = true && this.isSetFacets();
    boolean that_present_facets = true && that.isSetFacets();
    if (this_present_facets || that_present_facets) {
      if (!(this_present_facets && that_present_facets))
        return false;
      if (!this.facets.equals(that.facets))
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_facets = true && (isSetFacets());
    builder.append(present_facets);
    if (present_facets)
      builder.append(facets);

    boolean present_results = true && (isSetResults());
    builder.append(present_results);
    if (present_results)
      builder.append(results);

    return builder.toHashCode();
  }

  public int compareTo(QueryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryResponse typedOther = (QueryResponse)other;

    lastComparison = Boolean.valueOf(isSetFacets()).compareTo(typedOther.isSetFacets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facets, typedOther.facets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(typedOther.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, typedOther.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryResponse(");
    boolean first = true;

    sb.append("facets:");
    if (this.facets == null) {
      sb.append("null");
    } else {
      sb.append(this.facets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryResponseStandardSchemeFactory implements SchemeFactory {
    public QueryResponseStandardScheme getScheme() {
      return new QueryResponseStandardScheme();
    }
  }

  private static class QueryResponseStandardScheme extends StandardScheme<QueryResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.facets = new ArrayList<FacetResult>(_list144.size);
                for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                {
                  FacetResult _elem146; // required
                  _elem146 = new FacetResult();
                  _elem146.read(iprot);
                  struct.facets.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setFacetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.results = new ArrayList<QueryResult>(_list147.size);
                for (int _i148 = 0; _i148 < _list147.size; ++_i148)
                {
                  QueryResult _elem149; // required
                  _elem149 = new QueryResult();
                  _elem149.read(iprot);
                  struct.results.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.facets != null) {
        oprot.writeFieldBegin(FACETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facets.size()));
          for (FacetResult _iter150 : struct.facets)
          {
            _iter150.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (QueryResult _iter151 : struct.results)
          {
            _iter151.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryResponseTupleSchemeFactory implements SchemeFactory {
    public QueryResponseTupleScheme getScheme() {
      return new QueryResponseTupleScheme();
    }
  }

  private static class QueryResponseTupleScheme extends TupleScheme<QueryResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFacets()) {
        optionals.set(0);
      }
      if (struct.isSetResults()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFacets()) {
        {
          oprot.writeI32(struct.facets.size());
          for (FacetResult _iter152 : struct.facets)
          {
            _iter152.write(oprot);
          }
        }
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (QueryResult _iter153 : struct.results)
          {
            _iter153.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list154 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facets = new ArrayList<FacetResult>(_list154.size);
          for (int _i155 = 0; _i155 < _list154.size; ++_i155)
          {
            FacetResult _elem156; // required
            _elem156 = new FacetResult();
            _elem156.read(iprot);
            struct.facets.add(_elem156);
          }
        }
        struct.setFacetsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<QueryResult>(_list157.size);
          for (int _i158 = 0; _i158 < _list157.size; ++_i158)
          {
            QueryResult _elem159; // required
            _elem159 = new QueryResult();
            _elem159.read(iprot);
            struct.results.add(_elem159);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}

