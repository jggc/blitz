/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Une facet et ses valeurs.
 */
public class FacetResult implements org.apache.thrift.TBase<FacetResult, FacetResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetResult");

  private static final org.apache.thrift.protocol.TField METADATA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacetResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacetResultTupleSchemeFactory());
  }

  /**
   * Le nom du metadata sur lequel la facet est basee (e.g. "Auteur")
   */
  public String metadataName; // required
  /**
   * La liste de valeurs associees a ce metadata (e.g. "Justin Bieber" : 5, "Bob Marley" : 3)
   */
  public List<FacetValue> values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Le nom du metadata sur lequel la facet est basee (e.g. "Auteur")
     */
    METADATA_NAME((short)1, "metadataName"),
    /**
     * La liste de valeurs associees a ce metadata (e.g. "Justin Bieber" : 5, "Bob Marley" : 3)
     */
    VALUES((short)2, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METADATA_NAME
          return METADATA_NAME;
        case 2: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METADATA_NAME, new org.apache.thrift.meta_data.FieldMetaData("metadataName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetResult.class, metaDataMap);
  }

  public FacetResult() {
  }

  public FacetResult(
    String metadataName,
    List<FacetValue> values)
  {
    this();
    this.metadataName = metadataName;
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetResult(FacetResult other) {
    if (other.isSetMetadataName()) {
      this.metadataName = other.metadataName;
    }
    if (other.isSetValues()) {
      List<FacetValue> __this__values = new ArrayList<FacetValue>();
      for (FacetValue other_element : other.values) {
        __this__values.add(new FacetValue(other_element));
      }
      this.values = __this__values;
    }
  }

  public FacetResult deepCopy() {
    return new FacetResult(this);
  }

  @Override
  public void clear() {
    this.metadataName = null;
    this.values = null;
  }

  /**
   * Le nom du metadata sur lequel la facet est basee (e.g. "Auteur")
   */
  public String getMetadataName() {
    return this.metadataName;
  }

  /**
   * Le nom du metadata sur lequel la facet est basee (e.g. "Auteur")
   */
  public FacetResult setMetadataName(String metadataName) {
    this.metadataName = metadataName;
    return this;
  }

  public void unsetMetadataName() {
    this.metadataName = null;
  }

  /** Returns true if field metadataName is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataName() {
    return this.metadataName != null;
  }

  public void setMetadataNameIsSet(boolean value) {
    if (!value) {
      this.metadataName = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<FacetValue> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(FacetValue elem) {
    if (this.values == null) {
      this.values = new ArrayList<FacetValue>();
    }
    this.values.add(elem);
  }

  /**
   * La liste de valeurs associees a ce metadata (e.g. "Justin Bieber" : 5, "Bob Marley" : 3)
   */
  public List<FacetValue> getValues() {
    return this.values;
  }

  /**
   * La liste de valeurs associees a ce metadata (e.g. "Justin Bieber" : 5, "Bob Marley" : 3)
   */
  public FacetResult setValues(List<FacetValue> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METADATA_NAME:
      if (value == null) {
        unsetMetadataName();
      } else {
        setMetadataName((String)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<FacetValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METADATA_NAME:
      return getMetadataName();

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METADATA_NAME:
      return isSetMetadataName();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetResult)
      return this.equals((FacetResult)that);
    return false;
  }

  public boolean equals(FacetResult that) {
    if (that == null)
      return false;

    boolean this_present_metadataName = true && this.isSetMetadataName();
    boolean that_present_metadataName = true && that.isSetMetadataName();
    if (this_present_metadataName || that_present_metadataName) {
      if (!(this_present_metadataName && that_present_metadataName))
        return false;
      if (!this.metadataName.equals(that.metadataName))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_metadataName = true && (isSetMetadataName());
    builder.append(present_metadataName);
    if (present_metadataName)
      builder.append(metadataName);

    boolean present_values = true && (isSetValues());
    builder.append(present_values);
    if (present_values)
      builder.append(values);

    return builder.toHashCode();
  }

  public int compareTo(FacetResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FacetResult typedOther = (FacetResult)other;

    lastComparison = Boolean.valueOf(isSetMetadataName()).compareTo(typedOther.isSetMetadataName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataName, typedOther.metadataName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(typedOther.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, typedOther.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FacetResult(");
    boolean first = true;

    sb.append("metadataName:");
    if (this.metadataName == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetResultStandardSchemeFactory implements SchemeFactory {
    public FacetResultStandardScheme getScheme() {
      return new FacetResultStandardScheme();
    }
  }

  private static class FacetResultStandardScheme extends StandardScheme<FacetResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METADATA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadataName = iprot.readString();
              struct.setMetadataNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.values = new ArrayList<FacetValue>(_list136.size);
                for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                {
                  FacetValue _elem138; // required
                  _elem138 = new FacetValue();
                  _elem138.read(iprot);
                  struct.values.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metadataName != null) {
        oprot.writeFieldBegin(METADATA_NAME_FIELD_DESC);
        oprot.writeString(struct.metadataName);
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.values.size()));
          for (FacetValue _iter139 : struct.values)
          {
            _iter139.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetResultTupleSchemeFactory implements SchemeFactory {
    public FacetResultTupleScheme getScheme() {
      return new FacetResultTupleScheme();
    }
  }

  private static class FacetResultTupleScheme extends TupleScheme<FacetResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMetadataName()) {
        optionals.set(0);
      }
      if (struct.isSetValues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMetadataName()) {
        oprot.writeString(struct.metadataName);
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (FacetValue _iter140 : struct.values)
          {
            _iter140.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.metadataName = iprot.readString();
        struct.setMetadataNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.values = new ArrayList<FacetValue>(_list141.size);
          for (int _i142 = 0; _i142 < _list141.size; ++_i142)
          {
            FacetValue _elem143; // required
            _elem143 = new FacetValue();
            _elem143.read(iprot);
            struct.values.add(_elem143);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

}

