/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Un artiste qui fait de la musique.
 * Pensez a Justin Bieber.
 */
public class Artist implements org.apache.thrift.TBase<Artist, Artist._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Artist");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("active_start", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("active_end", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField GENRES_FIELD_DESC = new org.apache.thrift.protocol.TField("genres", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField ALBUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("albums", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("group_names", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField INSTRUMENTS_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("instruments_played", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ArtistStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ArtistTupleSchemeFactory());
  }

  /**
   * L'identifiant unique pour cet artiste
   */
  public String id; // required
  /**
   * Le nom sous lequel l'artiste est connu
   */
  public Set<String> name; // required
  /**
   * Le pays d'origine de l'artiste
   */
  public Set<String> origin; // required
  /**
   * La date a laquelle l'artiste a commence a etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> active_start; // required
  /**
   * La date a laquelle l'artiste a cesse d'etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> active_end; // required
  /**
   * Les genre musicaux de cet artiste
   */
  public Set<String> genres; // required
  /**
   * Les maisons de disque sous lesquelles cet artiste publie
   */
  public Set<String> labels; // required
  /**
   * Les identifiants uniques des albums de cet artiste
   */
  public Set<String> albums; // required
  /**
   * Le nom des groupes dont cet artiste est membre
   */
  public Set<String> group_names; // required
  /**
   * Les instruments que cet artiste joue
   */
  public Set<String> instruments_played; // required
  /**
   * La description de cet artiste.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public String text; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * L'identifiant unique pour cet artiste
     */
    ID((short)1, "id"),
    /**
     * Le nom sous lequel l'artiste est connu
     */
    NAME((short)2, "name"),
    /**
     * Le pays d'origine de l'artiste
     */
    ORIGIN((short)3, "origin"),
    /**
     * La date a laquelle l'artiste a commence a etre actif
     * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
     * Voir la documentation pour plus d'information sur les formats de date
     */
    ACTIVE_START((short)4, "active_start"),
    /**
     * La date a laquelle l'artiste a cesse d'etre actif
     * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
     * Voir la documentation pour plus d'information sur les formats de date
     */
    ACTIVE_END((short)5, "active_end"),
    /**
     * Les genre musicaux de cet artiste
     */
    GENRES((short)6, "genres"),
    /**
     * Les maisons de disque sous lesquelles cet artiste publie
     */
    LABELS((short)7, "labels"),
    /**
     * Les identifiants uniques des albums de cet artiste
     */
    ALBUMS((short)8, "albums"),
    /**
     * Le nom des groupes dont cet artiste est membre
     */
    GROUP_NAMES((short)9, "group_names"),
    /**
     * Les instruments que cet artiste joue
     */
    INSTRUMENTS_PLAYED((short)10, "instruments_played"),
    /**
     * La description de cet artiste.
     * La description est extraite de Wikipedia et contient de la
     * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
     */
    TEXT((short)11, "text");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ORIGIN
          return ORIGIN;
        case 4: // ACTIVE_START
          return ACTIVE_START;
        case 5: // ACTIVE_END
          return ACTIVE_END;
        case 6: // GENRES
          return GENRES;
        case 7: // LABELS
          return LABELS;
        case 8: // ALBUMS
          return ALBUMS;
        case 9: // GROUP_NAMES
          return GROUP_NAMES;
        case 10: // INSTRUMENTS_PLAYED
          return INSTRUMENTS_PLAYED;
        case 11: // TEXT
          return TEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACTIVE_START, new org.apache.thrift.meta_data.FieldMetaData("active_start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACTIVE_END, new org.apache.thrift.meta_data.FieldMetaData("active_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GENRES, new org.apache.thrift.meta_data.FieldMetaData("genres", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALBUMS, new org.apache.thrift.meta_data.FieldMetaData("albums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GROUP_NAMES, new org.apache.thrift.meta_data.FieldMetaData("group_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INSTRUMENTS_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("instruments_played", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Artist.class, metaDataMap);
  }

  public Artist() {
  }

  public Artist(
    String id,
    Set<String> name,
    Set<String> origin,
    Set<String> active_start,
    Set<String> active_end,
    Set<String> genres,
    Set<String> labels,
    Set<String> albums,
    Set<String> group_names,
    Set<String> instruments_played,
    String text)
  {
    this();
    this.id = id;
    this.name = name;
    this.origin = origin;
    this.active_start = active_start;
    this.active_end = active_end;
    this.genres = genres;
    this.labels = labels;
    this.albums = albums;
    this.group_names = group_names;
    this.instruments_played = instruments_played;
    this.text = text;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Artist(Artist other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      Set<String> __this__name = new HashSet<String>();
      for (String other_element : other.name) {
        __this__name.add(other_element);
      }
      this.name = __this__name;
    }
    if (other.isSetOrigin()) {
      Set<String> __this__origin = new HashSet<String>();
      for (String other_element : other.origin) {
        __this__origin.add(other_element);
      }
      this.origin = __this__origin;
    }
    if (other.isSetActive_start()) {
      Set<String> __this__active_start = new HashSet<String>();
      for (String other_element : other.active_start) {
        __this__active_start.add(other_element);
      }
      this.active_start = __this__active_start;
    }
    if (other.isSetActive_end()) {
      Set<String> __this__active_end = new HashSet<String>();
      for (String other_element : other.active_end) {
        __this__active_end.add(other_element);
      }
      this.active_end = __this__active_end;
    }
    if (other.isSetGenres()) {
      Set<String> __this__genres = new HashSet<String>();
      for (String other_element : other.genres) {
        __this__genres.add(other_element);
      }
      this.genres = __this__genres;
    }
    if (other.isSetLabels()) {
      Set<String> __this__labels = new HashSet<String>();
      for (String other_element : other.labels) {
        __this__labels.add(other_element);
      }
      this.labels = __this__labels;
    }
    if (other.isSetAlbums()) {
      Set<String> __this__albums = new HashSet<String>();
      for (String other_element : other.albums) {
        __this__albums.add(other_element);
      }
      this.albums = __this__albums;
    }
    if (other.isSetGroup_names()) {
      Set<String> __this__group_names = new HashSet<String>();
      for (String other_element : other.group_names) {
        __this__group_names.add(other_element);
      }
      this.group_names = __this__group_names;
    }
    if (other.isSetInstruments_played()) {
      Set<String> __this__instruments_played = new HashSet<String>();
      for (String other_element : other.instruments_played) {
        __this__instruments_played.add(other_element);
      }
      this.instruments_played = __this__instruments_played;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
  }

  public Artist deepCopy() {
    return new Artist(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.origin = null;
    this.active_start = null;
    this.active_end = null;
    this.genres = null;
    this.labels = null;
    this.albums = null;
    this.group_names = null;
    this.instruments_played = null;
    this.text = null;
  }

  /**
   * L'identifiant unique pour cet artiste
   */
  public String getId() {
    return this.id;
  }

  /**
   * L'identifiant unique pour cet artiste
   */
  public Artist setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getNameSize() {
    return (this.name == null) ? 0 : this.name.size();
  }

  public java.util.Iterator<String> getNameIterator() {
    return (this.name == null) ? null : this.name.iterator();
  }

  public void addToName(String elem) {
    if (this.name == null) {
      this.name = new HashSet<String>();
    }
    this.name.add(elem);
  }

  /**
   * Le nom sous lequel l'artiste est connu
   */
  public Set<String> getName() {
    return this.name;
  }

  /**
   * Le nom sous lequel l'artiste est connu
   */
  public Artist setName(Set<String> name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getOriginSize() {
    return (this.origin == null) ? 0 : this.origin.size();
  }

  public java.util.Iterator<String> getOriginIterator() {
    return (this.origin == null) ? null : this.origin.iterator();
  }

  public void addToOrigin(String elem) {
    if (this.origin == null) {
      this.origin = new HashSet<String>();
    }
    this.origin.add(elem);
  }

  /**
   * Le pays d'origine de l'artiste
   */
  public Set<String> getOrigin() {
    return this.origin;
  }

  /**
   * Le pays d'origine de l'artiste
   */
  public Artist setOrigin(Set<String> origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public int getActive_startSize() {
    return (this.active_start == null) ? 0 : this.active_start.size();
  }

  public java.util.Iterator<String> getActive_startIterator() {
    return (this.active_start == null) ? null : this.active_start.iterator();
  }

  public void addToActive_start(String elem) {
    if (this.active_start == null) {
      this.active_start = new HashSet<String>();
    }
    this.active_start.add(elem);
  }

  /**
   * La date a laquelle l'artiste a commence a etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> getActive_start() {
    return this.active_start;
  }

  /**
   * La date a laquelle l'artiste a commence a etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Artist setActive_start(Set<String> active_start) {
    this.active_start = active_start;
    return this;
  }

  public void unsetActive_start() {
    this.active_start = null;
  }

  /** Returns true if field active_start is set (has been assigned a value) and false otherwise */
  public boolean isSetActive_start() {
    return this.active_start != null;
  }

  public void setActive_startIsSet(boolean value) {
    if (!value) {
      this.active_start = null;
    }
  }

  public int getActive_endSize() {
    return (this.active_end == null) ? 0 : this.active_end.size();
  }

  public java.util.Iterator<String> getActive_endIterator() {
    return (this.active_end == null) ? null : this.active_end.iterator();
  }

  public void addToActive_end(String elem) {
    if (this.active_end == null) {
      this.active_end = new HashSet<String>();
    }
    this.active_end.add(elem);
  }

  /**
   * La date a laquelle l'artiste a cesse d'etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> getActive_end() {
    return this.active_end;
  }

  /**
   * La date a laquelle l'artiste a cesse d'etre actif
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Artist setActive_end(Set<String> active_end) {
    this.active_end = active_end;
    return this;
  }

  public void unsetActive_end() {
    this.active_end = null;
  }

  /** Returns true if field active_end is set (has been assigned a value) and false otherwise */
  public boolean isSetActive_end() {
    return this.active_end != null;
  }

  public void setActive_endIsSet(boolean value) {
    if (!value) {
      this.active_end = null;
    }
  }

  public int getGenresSize() {
    return (this.genres == null) ? 0 : this.genres.size();
  }

  public java.util.Iterator<String> getGenresIterator() {
    return (this.genres == null) ? null : this.genres.iterator();
  }

  public void addToGenres(String elem) {
    if (this.genres == null) {
      this.genres = new HashSet<String>();
    }
    this.genres.add(elem);
  }

  /**
   * Les genre musicaux de cet artiste
   */
  public Set<String> getGenres() {
    return this.genres;
  }

  /**
   * Les genre musicaux de cet artiste
   */
  public Artist setGenres(Set<String> genres) {
    this.genres = genres;
    return this;
  }

  public void unsetGenres() {
    this.genres = null;
  }

  /** Returns true if field genres is set (has been assigned a value) and false otherwise */
  public boolean isSetGenres() {
    return this.genres != null;
  }

  public void setGenresIsSet(boolean value) {
    if (!value) {
      this.genres = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public java.util.Iterator<String> getLabelsIterator() {
    return (this.labels == null) ? null : this.labels.iterator();
  }

  public void addToLabels(String elem) {
    if (this.labels == null) {
      this.labels = new HashSet<String>();
    }
    this.labels.add(elem);
  }

  /**
   * Les maisons de disque sous lesquelles cet artiste publie
   */
  public Set<String> getLabels() {
    return this.labels;
  }

  /**
   * Les maisons de disque sous lesquelles cet artiste publie
   */
  public Artist setLabels(Set<String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  public int getAlbumsSize() {
    return (this.albums == null) ? 0 : this.albums.size();
  }

  public java.util.Iterator<String> getAlbumsIterator() {
    return (this.albums == null) ? null : this.albums.iterator();
  }

  public void addToAlbums(String elem) {
    if (this.albums == null) {
      this.albums = new HashSet<String>();
    }
    this.albums.add(elem);
  }

  /**
   * Les identifiants uniques des albums de cet artiste
   */
  public Set<String> getAlbums() {
    return this.albums;
  }

  /**
   * Les identifiants uniques des albums de cet artiste
   */
  public Artist setAlbums(Set<String> albums) {
    this.albums = albums;
    return this;
  }

  public void unsetAlbums() {
    this.albums = null;
  }

  /** Returns true if field albums is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbums() {
    return this.albums != null;
  }

  public void setAlbumsIsSet(boolean value) {
    if (!value) {
      this.albums = null;
    }
  }

  public int getGroup_namesSize() {
    return (this.group_names == null) ? 0 : this.group_names.size();
  }

  public java.util.Iterator<String> getGroup_namesIterator() {
    return (this.group_names == null) ? null : this.group_names.iterator();
  }

  public void addToGroup_names(String elem) {
    if (this.group_names == null) {
      this.group_names = new HashSet<String>();
    }
    this.group_names.add(elem);
  }

  /**
   * Le nom des groupes dont cet artiste est membre
   */
  public Set<String> getGroup_names() {
    return this.group_names;
  }

  /**
   * Le nom des groupes dont cet artiste est membre
   */
  public Artist setGroup_names(Set<String> group_names) {
    this.group_names = group_names;
    return this;
  }

  public void unsetGroup_names() {
    this.group_names = null;
  }

  /** Returns true if field group_names is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_names() {
    return this.group_names != null;
  }

  public void setGroup_namesIsSet(boolean value) {
    if (!value) {
      this.group_names = null;
    }
  }

  public int getInstruments_playedSize() {
    return (this.instruments_played == null) ? 0 : this.instruments_played.size();
  }

  public java.util.Iterator<String> getInstruments_playedIterator() {
    return (this.instruments_played == null) ? null : this.instruments_played.iterator();
  }

  public void addToInstruments_played(String elem) {
    if (this.instruments_played == null) {
      this.instruments_played = new HashSet<String>();
    }
    this.instruments_played.add(elem);
  }

  /**
   * Les instruments que cet artiste joue
   */
  public Set<String> getInstruments_played() {
    return this.instruments_played;
  }

  /**
   * Les instruments que cet artiste joue
   */
  public Artist setInstruments_played(Set<String> instruments_played) {
    this.instruments_played = instruments_played;
    return this;
  }

  public void unsetInstruments_played() {
    this.instruments_played = null;
  }

  /** Returns true if field instruments_played is set (has been assigned a value) and false otherwise */
  public boolean isSetInstruments_played() {
    return this.instruments_played != null;
  }

  public void setInstruments_playedIsSet(boolean value) {
    if (!value) {
      this.instruments_played = null;
    }
  }

  /**
   * La description de cet artiste.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public String getText() {
    return this.text;
  }

  /**
   * La description de cet artiste.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public Artist setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((Set<String>)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((Set<String>)value);
      }
      break;

    case ACTIVE_START:
      if (value == null) {
        unsetActive_start();
      } else {
        setActive_start((Set<String>)value);
      }
      break;

    case ACTIVE_END:
      if (value == null) {
        unsetActive_end();
      } else {
        setActive_end((Set<String>)value);
      }
      break;

    case GENRES:
      if (value == null) {
        unsetGenres();
      } else {
        setGenres((Set<String>)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((Set<String>)value);
      }
      break;

    case ALBUMS:
      if (value == null) {
        unsetAlbums();
      } else {
        setAlbums((Set<String>)value);
      }
      break;

    case GROUP_NAMES:
      if (value == null) {
        unsetGroup_names();
      } else {
        setGroup_names((Set<String>)value);
      }
      break;

    case INSTRUMENTS_PLAYED:
      if (value == null) {
        unsetInstruments_played();
      } else {
        setInstruments_played((Set<String>)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case ORIGIN:
      return getOrigin();

    case ACTIVE_START:
      return getActive_start();

    case ACTIVE_END:
      return getActive_end();

    case GENRES:
      return getGenres();

    case LABELS:
      return getLabels();

    case ALBUMS:
      return getAlbums();

    case GROUP_NAMES:
      return getGroup_names();

    case INSTRUMENTS_PLAYED:
      return getInstruments_played();

    case TEXT:
      return getText();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ORIGIN:
      return isSetOrigin();
    case ACTIVE_START:
      return isSetActive_start();
    case ACTIVE_END:
      return isSetActive_end();
    case GENRES:
      return isSetGenres();
    case LABELS:
      return isSetLabels();
    case ALBUMS:
      return isSetAlbums();
    case GROUP_NAMES:
      return isSetGroup_names();
    case INSTRUMENTS_PLAYED:
      return isSetInstruments_played();
    case TEXT:
      return isSetText();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Artist)
      return this.equals((Artist)that);
    return false;
  }

  public boolean equals(Artist that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_active_start = true && this.isSetActive_start();
    boolean that_present_active_start = true && that.isSetActive_start();
    if (this_present_active_start || that_present_active_start) {
      if (!(this_present_active_start && that_present_active_start))
        return false;
      if (!this.active_start.equals(that.active_start))
        return false;
    }

    boolean this_present_active_end = true && this.isSetActive_end();
    boolean that_present_active_end = true && that.isSetActive_end();
    if (this_present_active_end || that_present_active_end) {
      if (!(this_present_active_end && that_present_active_end))
        return false;
      if (!this.active_end.equals(that.active_end))
        return false;
    }

    boolean this_present_genres = true && this.isSetGenres();
    boolean that_present_genres = true && that.isSetGenres();
    if (this_present_genres || that_present_genres) {
      if (!(this_present_genres && that_present_genres))
        return false;
      if (!this.genres.equals(that.genres))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_albums = true && this.isSetAlbums();
    boolean that_present_albums = true && that.isSetAlbums();
    if (this_present_albums || that_present_albums) {
      if (!(this_present_albums && that_present_albums))
        return false;
      if (!this.albums.equals(that.albums))
        return false;
    }

    boolean this_present_group_names = true && this.isSetGroup_names();
    boolean that_present_group_names = true && that.isSetGroup_names();
    if (this_present_group_names || that_present_group_names) {
      if (!(this_present_group_names && that_present_group_names))
        return false;
      if (!this.group_names.equals(that.group_names))
        return false;
    }

    boolean this_present_instruments_played = true && this.isSetInstruments_played();
    boolean that_present_instruments_played = true && that.isSetInstruments_played();
    if (this_present_instruments_played || that_present_instruments_played) {
      if (!(this_present_instruments_played && that_present_instruments_played))
        return false;
      if (!this.instruments_played.equals(that.instruments_played))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_origin = true && (isSetOrigin());
    builder.append(present_origin);
    if (present_origin)
      builder.append(origin);

    boolean present_active_start = true && (isSetActive_start());
    builder.append(present_active_start);
    if (present_active_start)
      builder.append(active_start);

    boolean present_active_end = true && (isSetActive_end());
    builder.append(present_active_end);
    if (present_active_end)
      builder.append(active_end);

    boolean present_genres = true && (isSetGenres());
    builder.append(present_genres);
    if (present_genres)
      builder.append(genres);

    boolean present_labels = true && (isSetLabels());
    builder.append(present_labels);
    if (present_labels)
      builder.append(labels);

    boolean present_albums = true && (isSetAlbums());
    builder.append(present_albums);
    if (present_albums)
      builder.append(albums);

    boolean present_group_names = true && (isSetGroup_names());
    builder.append(present_group_names);
    if (present_group_names)
      builder.append(group_names);

    boolean present_instruments_played = true && (isSetInstruments_played());
    builder.append(present_instruments_played);
    if (present_instruments_played)
      builder.append(instruments_played);

    boolean present_text = true && (isSetText());
    builder.append(present_text);
    if (present_text)
      builder.append(text);

    return builder.toHashCode();
  }

  public int compareTo(Artist other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Artist typedOther = (Artist)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(typedOther.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, typedOther.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive_start()).compareTo(typedOther.isSetActive_start());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive_start()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active_start, typedOther.active_start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive_end()).compareTo(typedOther.isSetActive_end());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive_end()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active_end, typedOther.active_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenres()).compareTo(typedOther.isSetGenres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genres, typedOther.genres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabels()).compareTo(typedOther.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, typedOther.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbums()).compareTo(typedOther.isSetAlbums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albums, typedOther.albums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_names()).compareTo(typedOther.isSetGroup_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_names, typedOther.group_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstruments_played()).compareTo(typedOther.isSetInstruments_played());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstruments_played()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruments_played, typedOther.instruments_played);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Artist(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active_start:");
    if (this.active_start == null) {
      sb.append("null");
    } else {
      sb.append(this.active_start);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("active_end:");
    if (this.active_end == null) {
      sb.append("null");
    } else {
      sb.append(this.active_end);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genres:");
    if (this.genres == null) {
      sb.append("null");
    } else {
      sb.append(this.genres);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labels:");
    if (this.labels == null) {
      sb.append("null");
    } else {
      sb.append(this.labels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("albums:");
    if (this.albums == null) {
      sb.append("null");
    } else {
      sb.append(this.albums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group_names:");
    if (this.group_names == null) {
      sb.append("null");
    } else {
      sb.append(this.group_names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instruments_played:");
    if (this.instruments_played == null) {
      sb.append("null");
    } else {
      sb.append(this.instruments_played);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArtistStandardSchemeFactory implements SchemeFactory {
    public ArtistStandardScheme getScheme() {
      return new ArtistStandardScheme();
    }
  }

  private static class ArtistStandardScheme extends StandardScheme<Artist> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Artist struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.name = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.name.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.origin = new HashSet<String>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.origin.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.active_start = new HashSet<String>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  String _elem8; // required
                  _elem8 = iprot.readString();
                  struct.active_start.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setActive_startIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.active_end = new HashSet<String>(2*_set9.size);
                for (int _i10 = 0; _i10 < _set9.size; ++_i10)
                {
                  String _elem11; // required
                  _elem11 = iprot.readString();
                  struct.active_end.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setActive_endIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GENRES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.genres = new HashSet<String>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  String _elem14; // required
                  _elem14 = iprot.readString();
                  struct.genres.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setGenresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.labels = new HashSet<String>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  String _elem17; // required
                  _elem17 = iprot.readString();
                  struct.labels.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALBUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.albums = new HashSet<String>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  String _elem20; // required
                  _elem20 = iprot.readString();
                  struct.albums.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setAlbumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                struct.group_names = new HashSet<String>(2*_set21.size);
                for (int _i22 = 0; _i22 < _set21.size; ++_i22)
                {
                  String _elem23; // required
                  _elem23 = iprot.readString();
                  struct.group_names.add(_elem23);
                }
                iprot.readSetEnd();
              }
              struct.setGroup_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INSTRUMENTS_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.instruments_played = new HashSet<String>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  String _elem26; // required
                  _elem26 = iprot.readString();
                  struct.instruments_played.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setInstruments_playedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Artist struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.name.size()));
          for (String _iter27 : struct.name)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.origin.size()));
          for (String _iter28 : struct.origin)
          {
            oprot.writeString(_iter28);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.active_start != null) {
        oprot.writeFieldBegin(ACTIVE_START_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.active_start.size()));
          for (String _iter29 : struct.active_start)
          {
            oprot.writeString(_iter29);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.active_end != null) {
        oprot.writeFieldBegin(ACTIVE_END_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.active_end.size()));
          for (String _iter30 : struct.active_end)
          {
            oprot.writeString(_iter30);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.genres != null) {
        oprot.writeFieldBegin(GENRES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.genres.size()));
          for (String _iter31 : struct.genres)
          {
            oprot.writeString(_iter31);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.labels != null) {
        oprot.writeFieldBegin(LABELS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
          for (String _iter32 : struct.labels)
          {
            oprot.writeString(_iter32);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.albums != null) {
        oprot.writeFieldBegin(ALBUMS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.albums.size()));
          for (String _iter33 : struct.albums)
          {
            oprot.writeString(_iter33);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.group_names != null) {
        oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
          for (String _iter34 : struct.group_names)
          {
            oprot.writeString(_iter34);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.instruments_played != null) {
        oprot.writeFieldBegin(INSTRUMENTS_PLAYED_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.instruments_played.size()));
          for (String _iter35 : struct.instruments_played)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArtistTupleSchemeFactory implements SchemeFactory {
    public ArtistTupleScheme getScheme() {
      return new ArtistTupleScheme();
    }
  }

  private static class ArtistTupleScheme extends TupleScheme<Artist> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Artist struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetOrigin()) {
        optionals.set(2);
      }
      if (struct.isSetActive_start()) {
        optionals.set(3);
      }
      if (struct.isSetActive_end()) {
        optionals.set(4);
      }
      if (struct.isSetGenres()) {
        optionals.set(5);
      }
      if (struct.isSetLabels()) {
        optionals.set(6);
      }
      if (struct.isSetAlbums()) {
        optionals.set(7);
      }
      if (struct.isSetGroup_names()) {
        optionals.set(8);
      }
      if (struct.isSetInstruments_played()) {
        optionals.set(9);
      }
      if (struct.isSetText()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        {
          oprot.writeI32(struct.name.size());
          for (String _iter36 : struct.name)
          {
            oprot.writeString(_iter36);
          }
        }
      }
      if (struct.isSetOrigin()) {
        {
          oprot.writeI32(struct.origin.size());
          for (String _iter37 : struct.origin)
          {
            oprot.writeString(_iter37);
          }
        }
      }
      if (struct.isSetActive_start()) {
        {
          oprot.writeI32(struct.active_start.size());
          for (String _iter38 : struct.active_start)
          {
            oprot.writeString(_iter38);
          }
        }
      }
      if (struct.isSetActive_end()) {
        {
          oprot.writeI32(struct.active_end.size());
          for (String _iter39 : struct.active_end)
          {
            oprot.writeString(_iter39);
          }
        }
      }
      if (struct.isSetGenres()) {
        {
          oprot.writeI32(struct.genres.size());
          for (String _iter40 : struct.genres)
          {
            oprot.writeString(_iter40);
          }
        }
      }
      if (struct.isSetLabels()) {
        {
          oprot.writeI32(struct.labels.size());
          for (String _iter41 : struct.labels)
          {
            oprot.writeString(_iter41);
          }
        }
      }
      if (struct.isSetAlbums()) {
        {
          oprot.writeI32(struct.albums.size());
          for (String _iter42 : struct.albums)
          {
            oprot.writeString(_iter42);
          }
        }
      }
      if (struct.isSetGroup_names()) {
        {
          oprot.writeI32(struct.group_names.size());
          for (String _iter43 : struct.group_names)
          {
            oprot.writeString(_iter43);
          }
        }
      }
      if (struct.isSetInstruments_played()) {
        {
          oprot.writeI32(struct.instruments_played.size());
          for (String _iter44 : struct.instruments_played)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Artist struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.name = new HashSet<String>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            String _elem47; // required
            _elem47 = iprot.readString();
            struct.name.add(_elem47);
          }
        }
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set48 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.origin = new HashSet<String>(2*_set48.size);
          for (int _i49 = 0; _i49 < _set48.size; ++_i49)
          {
            String _elem50; // required
            _elem50 = iprot.readString();
            struct.origin.add(_elem50);
          }
        }
        struct.setOriginIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set51 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.active_start = new HashSet<String>(2*_set51.size);
          for (int _i52 = 0; _i52 < _set51.size; ++_i52)
          {
            String _elem53; // required
            _elem53 = iprot.readString();
            struct.active_start.add(_elem53);
          }
        }
        struct.setActive_startIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set54 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.active_end = new HashSet<String>(2*_set54.size);
          for (int _i55 = 0; _i55 < _set54.size; ++_i55)
          {
            String _elem56; // required
            _elem56 = iprot.readString();
            struct.active_end.add(_elem56);
          }
        }
        struct.setActive_endIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set57 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.genres = new HashSet<String>(2*_set57.size);
          for (int _i58 = 0; _i58 < _set57.size; ++_i58)
          {
            String _elem59; // required
            _elem59 = iprot.readString();
            struct.genres.add(_elem59);
          }
        }
        struct.setGenresIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set60 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labels = new HashSet<String>(2*_set60.size);
          for (int _i61 = 0; _i61 < _set60.size; ++_i61)
          {
            String _elem62; // required
            _elem62 = iprot.readString();
            struct.labels.add(_elem62);
          }
        }
        struct.setLabelsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set63 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.albums = new HashSet<String>(2*_set63.size);
          for (int _i64 = 0; _i64 < _set63.size; ++_i64)
          {
            String _elem65; // required
            _elem65 = iprot.readString();
            struct.albums.add(_elem65);
          }
        }
        struct.setAlbumsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set66 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.group_names = new HashSet<String>(2*_set66.size);
          for (int _i67 = 0; _i67 < _set66.size; ++_i67)
          {
            String _elem68; // required
            _elem68 = iprot.readString();
            struct.group_names.add(_elem68);
          }
        }
        struct.setGroup_namesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set69 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.instruments_played = new HashSet<String>(2*_set69.size);
          for (int _i70 = 0; _i70 < _set69.size; ++_i70)
          {
            String _elem71; // required
            _elem71 = iprot.readString();
            struct.instruments_played.add(_elem71);
          }
        }
        struct.setInstruments_playedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
    }
  }

}

