/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Un album de musique qui contient des chansons.
 * Pensez .. au dernier album de Justin Bieber.
 */
public class Album implements org.apache.thrift.TBase<Album, Album._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Album");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField ARTISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("artists", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("release_date", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField GENRES_FIELD_DESC = new org.apache.thrift.protocol.TField("genres", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField TRACK_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("track_names", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AlbumStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AlbumTupleSchemeFactory());
  }

  /**
   * L'identifiant unique de cet album
   */
  public String id; // required
  /**
   * Le nom de cet album
   */
  public Set<String> name; // required
  /**
   * Les identifiants uniques des artistes qui ont produit cet album
   */
  public Set<String> artists; // required
  /**
   * La date a laquelle cet album a ete lance
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> release_date; // required
  /**
   * Les genre musicaux de cet album
   */
  public Set<String> genres; // required
  /**
   * Les titres des chansons sur cet album
   */
  public Set<String> track_names; // required
  /**
   * La description de cet album.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public String text; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * L'identifiant unique de cet album
     */
    ID((short)1, "id"),
    /**
     * Le nom de cet album
     */
    NAME((short)2, "name"),
    /**
     * Les identifiants uniques des artistes qui ont produit cet album
     */
    ARTISTS((short)3, "artists"),
    /**
     * La date a laquelle cet album a ete lance
     * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
     * Voir la documentation pour plus d'information sur les formats de date
     */
    RELEASE_DATE((short)4, "release_date"),
    /**
     * Les genre musicaux de cet album
     */
    GENRES((short)5, "genres"),
    /**
     * Les titres des chansons sur cet album
     */
    TRACK_NAMES((short)6, "track_names"),
    /**
     * La description de cet album.
     * La description est extraite de Wikipedia et contient de la
     * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
     */
    TEXT((short)7, "text");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ARTISTS
          return ARTISTS;
        case 4: // RELEASE_DATE
          return RELEASE_DATE;
        case 5: // GENRES
          return GENRES;
        case 6: // TRACK_NAMES
          return TRACK_NAMES;
        case 7: // TEXT
          return TEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ARTISTS, new org.apache.thrift.meta_data.FieldMetaData("artists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("release_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GENRES, new org.apache.thrift.meta_data.FieldMetaData("genres", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACK_NAMES, new org.apache.thrift.meta_data.FieldMetaData("track_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Album.class, metaDataMap);
  }

  public Album() {
  }

  public Album(
    String id,
    Set<String> name,
    Set<String> artists,
    Set<String> release_date,
    Set<String> genres,
    Set<String> track_names,
    String text)
  {
    this();
    this.id = id;
    this.name = name;
    this.artists = artists;
    this.release_date = release_date;
    this.genres = genres;
    this.track_names = track_names;
    this.text = text;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Album(Album other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      Set<String> __this__name = new HashSet<String>();
      for (String other_element : other.name) {
        __this__name.add(other_element);
      }
      this.name = __this__name;
    }
    if (other.isSetArtists()) {
      Set<String> __this__artists = new HashSet<String>();
      for (String other_element : other.artists) {
        __this__artists.add(other_element);
      }
      this.artists = __this__artists;
    }
    if (other.isSetRelease_date()) {
      Set<String> __this__release_date = new HashSet<String>();
      for (String other_element : other.release_date) {
        __this__release_date.add(other_element);
      }
      this.release_date = __this__release_date;
    }
    if (other.isSetGenres()) {
      Set<String> __this__genres = new HashSet<String>();
      for (String other_element : other.genres) {
        __this__genres.add(other_element);
      }
      this.genres = __this__genres;
    }
    if (other.isSetTrack_names()) {
      Set<String> __this__track_names = new HashSet<String>();
      for (String other_element : other.track_names) {
        __this__track_names.add(other_element);
      }
      this.track_names = __this__track_names;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
  }

  public Album deepCopy() {
    return new Album(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.artists = null;
    this.release_date = null;
    this.genres = null;
    this.track_names = null;
    this.text = null;
  }

  /**
   * L'identifiant unique de cet album
   */
  public String getId() {
    return this.id;
  }

  /**
   * L'identifiant unique de cet album
   */
  public Album setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getNameSize() {
    return (this.name == null) ? 0 : this.name.size();
  }

  public java.util.Iterator<String> getNameIterator() {
    return (this.name == null) ? null : this.name.iterator();
  }

  public void addToName(String elem) {
    if (this.name == null) {
      this.name = new HashSet<String>();
    }
    this.name.add(elem);
  }

  /**
   * Le nom de cet album
   */
  public Set<String> getName() {
    return this.name;
  }

  /**
   * Le nom de cet album
   */
  public Album setName(Set<String> name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getArtistsSize() {
    return (this.artists == null) ? 0 : this.artists.size();
  }

  public java.util.Iterator<String> getArtistsIterator() {
    return (this.artists == null) ? null : this.artists.iterator();
  }

  public void addToArtists(String elem) {
    if (this.artists == null) {
      this.artists = new HashSet<String>();
    }
    this.artists.add(elem);
  }

  /**
   * Les identifiants uniques des artistes qui ont produit cet album
   */
  public Set<String> getArtists() {
    return this.artists;
  }

  /**
   * Les identifiants uniques des artistes qui ont produit cet album
   */
  public Album setArtists(Set<String> artists) {
    this.artists = artists;
    return this;
  }

  public void unsetArtists() {
    this.artists = null;
  }

  /** Returns true if field artists is set (has been assigned a value) and false otherwise */
  public boolean isSetArtists() {
    return this.artists != null;
  }

  public void setArtistsIsSet(boolean value) {
    if (!value) {
      this.artists = null;
    }
  }

  public int getRelease_dateSize() {
    return (this.release_date == null) ? 0 : this.release_date.size();
  }

  public java.util.Iterator<String> getRelease_dateIterator() {
    return (this.release_date == null) ? null : this.release_date.iterator();
  }

  public void addToRelease_date(String elem) {
    if (this.release_date == null) {
      this.release_date = new HashSet<String>();
    }
    this.release_date.add(elem);
  }

  /**
   * La date a laquelle cet album a ete lance
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Set<String> getRelease_date() {
    return this.release_date;
  }

  /**
   * La date a laquelle cet album a ete lance
   * La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
   * Voir la documentation pour plus d'information sur les formats de date
   */
  public Album setRelease_date(Set<String> release_date) {
    this.release_date = release_date;
    return this;
  }

  public void unsetRelease_date() {
    this.release_date = null;
  }

  /** Returns true if field release_date is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease_date() {
    return this.release_date != null;
  }

  public void setRelease_dateIsSet(boolean value) {
    if (!value) {
      this.release_date = null;
    }
  }

  public int getGenresSize() {
    return (this.genres == null) ? 0 : this.genres.size();
  }

  public java.util.Iterator<String> getGenresIterator() {
    return (this.genres == null) ? null : this.genres.iterator();
  }

  public void addToGenres(String elem) {
    if (this.genres == null) {
      this.genres = new HashSet<String>();
    }
    this.genres.add(elem);
  }

  /**
   * Les genre musicaux de cet album
   */
  public Set<String> getGenres() {
    return this.genres;
  }

  /**
   * Les genre musicaux de cet album
   */
  public Album setGenres(Set<String> genres) {
    this.genres = genres;
    return this;
  }

  public void unsetGenres() {
    this.genres = null;
  }

  /** Returns true if field genres is set (has been assigned a value) and false otherwise */
  public boolean isSetGenres() {
    return this.genres != null;
  }

  public void setGenresIsSet(boolean value) {
    if (!value) {
      this.genres = null;
    }
  }

  public int getTrack_namesSize() {
    return (this.track_names == null) ? 0 : this.track_names.size();
  }

  public java.util.Iterator<String> getTrack_namesIterator() {
    return (this.track_names == null) ? null : this.track_names.iterator();
  }

  public void addToTrack_names(String elem) {
    if (this.track_names == null) {
      this.track_names = new HashSet<String>();
    }
    this.track_names.add(elem);
  }

  /**
   * Les titres des chansons sur cet album
   */
  public Set<String> getTrack_names() {
    return this.track_names;
  }

  /**
   * Les titres des chansons sur cet album
   */
  public Album setTrack_names(Set<String> track_names) {
    this.track_names = track_names;
    return this;
  }

  public void unsetTrack_names() {
    this.track_names = null;
  }

  /** Returns true if field track_names is set (has been assigned a value) and false otherwise */
  public boolean isSetTrack_names() {
    return this.track_names != null;
  }

  public void setTrack_namesIsSet(boolean value) {
    if (!value) {
      this.track_names = null;
    }
  }

  /**
   * La description de cet album.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public String getText() {
    return this.text;
  }

  /**
   * La description de cet album.
   * La description est extraite de Wikipedia et contient de la
   * syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
   */
  public Album setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((Set<String>)value);
      }
      break;

    case ARTISTS:
      if (value == null) {
        unsetArtists();
      } else {
        setArtists((Set<String>)value);
      }
      break;

    case RELEASE_DATE:
      if (value == null) {
        unsetRelease_date();
      } else {
        setRelease_date((Set<String>)value);
      }
      break;

    case GENRES:
      if (value == null) {
        unsetGenres();
      } else {
        setGenres((Set<String>)value);
      }
      break;

    case TRACK_NAMES:
      if (value == null) {
        unsetTrack_names();
      } else {
        setTrack_names((Set<String>)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case ARTISTS:
      return getArtists();

    case RELEASE_DATE:
      return getRelease_date();

    case GENRES:
      return getGenres();

    case TRACK_NAMES:
      return getTrack_names();

    case TEXT:
      return getText();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ARTISTS:
      return isSetArtists();
    case RELEASE_DATE:
      return isSetRelease_date();
    case GENRES:
      return isSetGenres();
    case TRACK_NAMES:
      return isSetTrack_names();
    case TEXT:
      return isSetText();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Album)
      return this.equals((Album)that);
    return false;
  }

  public boolean equals(Album that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_artists = true && this.isSetArtists();
    boolean that_present_artists = true && that.isSetArtists();
    if (this_present_artists || that_present_artists) {
      if (!(this_present_artists && that_present_artists))
        return false;
      if (!this.artists.equals(that.artists))
        return false;
    }

    boolean this_present_release_date = true && this.isSetRelease_date();
    boolean that_present_release_date = true && that.isSetRelease_date();
    if (this_present_release_date || that_present_release_date) {
      if (!(this_present_release_date && that_present_release_date))
        return false;
      if (!this.release_date.equals(that.release_date))
        return false;
    }

    boolean this_present_genres = true && this.isSetGenres();
    boolean that_present_genres = true && that.isSetGenres();
    if (this_present_genres || that_present_genres) {
      if (!(this_present_genres && that_present_genres))
        return false;
      if (!this.genres.equals(that.genres))
        return false;
    }

    boolean this_present_track_names = true && this.isSetTrack_names();
    boolean that_present_track_names = true && that.isSetTrack_names();
    if (this_present_track_names || that_present_track_names) {
      if (!(this_present_track_names && that_present_track_names))
        return false;
      if (!this.track_names.equals(that.track_names))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_artists = true && (isSetArtists());
    builder.append(present_artists);
    if (present_artists)
      builder.append(artists);

    boolean present_release_date = true && (isSetRelease_date());
    builder.append(present_release_date);
    if (present_release_date)
      builder.append(release_date);

    boolean present_genres = true && (isSetGenres());
    builder.append(present_genres);
    if (present_genres)
      builder.append(genres);

    boolean present_track_names = true && (isSetTrack_names());
    builder.append(present_track_names);
    if (present_track_names)
      builder.append(track_names);

    boolean present_text = true && (isSetText());
    builder.append(present_text);
    if (present_text)
      builder.append(text);

    return builder.toHashCode();
  }

  public int compareTo(Album other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Album typedOther = (Album)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtists()).compareTo(typedOther.isSetArtists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artists, typedOther.artists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelease_date()).compareTo(typedOther.isSetRelease_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release_date, typedOther.release_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenres()).compareTo(typedOther.isSetGenres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genres, typedOther.genres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrack_names()).compareTo(typedOther.isSetTrack_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrack_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.track_names, typedOther.track_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Album(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("artists:");
    if (this.artists == null) {
      sb.append("null");
    } else {
      sb.append(this.artists);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("release_date:");
    if (this.release_date == null) {
      sb.append("null");
    } else {
      sb.append(this.release_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genres:");
    if (this.genres == null) {
      sb.append("null");
    } else {
      sb.append(this.genres);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("track_names:");
    if (this.track_names == null) {
      sb.append("null");
    } else {
      sb.append(this.track_names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AlbumStandardSchemeFactory implements SchemeFactory {
    public AlbumStandardScheme getScheme() {
      return new AlbumStandardScheme();
    }
  }

  private static class AlbumStandardScheme extends StandardScheme<Album> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Album struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set72 = iprot.readSetBegin();
                struct.name = new HashSet<String>(2*_set72.size);
                for (int _i73 = 0; _i73 < _set72.size; ++_i73)
                {
                  String _elem74; // required
                  _elem74 = iprot.readString();
                  struct.name.add(_elem74);
                }
                iprot.readSetEnd();
              }
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARTISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set75 = iprot.readSetBegin();
                struct.artists = new HashSet<String>(2*_set75.size);
                for (int _i76 = 0; _i76 < _set75.size; ++_i76)
                {
                  String _elem77; // required
                  _elem77 = iprot.readString();
                  struct.artists.add(_elem77);
                }
                iprot.readSetEnd();
              }
              struct.setArtistsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set78 = iprot.readSetBegin();
                struct.release_date = new HashSet<String>(2*_set78.size);
                for (int _i79 = 0; _i79 < _set78.size; ++_i79)
                {
                  String _elem80; // required
                  _elem80 = iprot.readString();
                  struct.release_date.add(_elem80);
                }
                iprot.readSetEnd();
              }
              struct.setRelease_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENRES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set81 = iprot.readSetBegin();
                struct.genres = new HashSet<String>(2*_set81.size);
                for (int _i82 = 0; _i82 < _set81.size; ++_i82)
                {
                  String _elem83; // required
                  _elem83 = iprot.readString();
                  struct.genres.add(_elem83);
                }
                iprot.readSetEnd();
              }
              struct.setGenresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRACK_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set84 = iprot.readSetBegin();
                struct.track_names = new HashSet<String>(2*_set84.size);
                for (int _i85 = 0; _i85 < _set84.size; ++_i85)
                {
                  String _elem86; // required
                  _elem86 = iprot.readString();
                  struct.track_names.add(_elem86);
                }
                iprot.readSetEnd();
              }
              struct.setTrack_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Album struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.name.size()));
          for (String _iter87 : struct.name)
          {
            oprot.writeString(_iter87);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.artists != null) {
        oprot.writeFieldBegin(ARTISTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.artists.size()));
          for (String _iter88 : struct.artists)
          {
            oprot.writeString(_iter88);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.release_date != null) {
        oprot.writeFieldBegin(RELEASE_DATE_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.release_date.size()));
          for (String _iter89 : struct.release_date)
          {
            oprot.writeString(_iter89);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.genres != null) {
        oprot.writeFieldBegin(GENRES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.genres.size()));
          for (String _iter90 : struct.genres)
          {
            oprot.writeString(_iter90);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.track_names != null) {
        oprot.writeFieldBegin(TRACK_NAMES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.track_names.size()));
          for (String _iter91 : struct.track_names)
          {
            oprot.writeString(_iter91);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AlbumTupleSchemeFactory implements SchemeFactory {
    public AlbumTupleScheme getScheme() {
      return new AlbumTupleScheme();
    }
  }

  private static class AlbumTupleScheme extends TupleScheme<Album> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Album struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetArtists()) {
        optionals.set(2);
      }
      if (struct.isSetRelease_date()) {
        optionals.set(3);
      }
      if (struct.isSetGenres()) {
        optionals.set(4);
      }
      if (struct.isSetTrack_names()) {
        optionals.set(5);
      }
      if (struct.isSetText()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        {
          oprot.writeI32(struct.name.size());
          for (String _iter92 : struct.name)
          {
            oprot.writeString(_iter92);
          }
        }
      }
      if (struct.isSetArtists()) {
        {
          oprot.writeI32(struct.artists.size());
          for (String _iter93 : struct.artists)
          {
            oprot.writeString(_iter93);
          }
        }
      }
      if (struct.isSetRelease_date()) {
        {
          oprot.writeI32(struct.release_date.size());
          for (String _iter94 : struct.release_date)
          {
            oprot.writeString(_iter94);
          }
        }
      }
      if (struct.isSetGenres()) {
        {
          oprot.writeI32(struct.genres.size());
          for (String _iter95 : struct.genres)
          {
            oprot.writeString(_iter95);
          }
        }
      }
      if (struct.isSetTrack_names()) {
        {
          oprot.writeI32(struct.track_names.size());
          for (String _iter96 : struct.track_names)
          {
            oprot.writeString(_iter96);
          }
        }
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Album struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set97 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.name = new HashSet<String>(2*_set97.size);
          for (int _i98 = 0; _i98 < _set97.size; ++_i98)
          {
            String _elem99; // required
            _elem99 = iprot.readString();
            struct.name.add(_elem99);
          }
        }
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set100 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.artists = new HashSet<String>(2*_set100.size);
          for (int _i101 = 0; _i101 < _set100.size; ++_i101)
          {
            String _elem102; // required
            _elem102 = iprot.readString();
            struct.artists.add(_elem102);
          }
        }
        struct.setArtistsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set103 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.release_date = new HashSet<String>(2*_set103.size);
          for (int _i104 = 0; _i104 < _set103.size; ++_i104)
          {
            String _elem105; // required
            _elem105 = iprot.readString();
            struct.release_date.add(_elem105);
          }
        }
        struct.setRelease_dateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set106 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.genres = new HashSet<String>(2*_set106.size);
          for (int _i107 = 0; _i107 < _set106.size; ++_i107)
          {
            String _elem108; // required
            _elem108 = iprot.readString();
            struct.genres.add(_elem108);
          }
        }
        struct.setGenresIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set109 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.track_names = new HashSet<String>(2*_set109.size);
          for (int _i110 = 0; _i110 < _set109.size; ++_i110)
          {
            String _elem111; // required
            _elem111 = iprot.readString();
            struct.track_names.add(_elem111);
          }
        }
        struct.setTrack_namesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
    }
  }

}

