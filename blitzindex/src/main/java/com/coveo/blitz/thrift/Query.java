/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Une "Query" est une requete faite a votre index. Votre index doit repondre de maniere appropriee
 * et le plus rapidement possible.
 * 
 * Voir la documentation du concours pour savoir ce que signifie une reponse "appropriee".
 */
public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Query");

  private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_TREE_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTreeNodes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FACET_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("facetFilters", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTupleSchemeFactory());
  }

  /**
   * L'identifiant du noeud racine de l'arbre syntaxique de cette requete.
   */
  public int rootId; // required
  /**
   * Liste des noeuds composant l'arbre.
   */
  public List<QueryTreeNode> queryTreeNodes; // required
  /**
   * Liste de filtres sur les facettes
   */
  public List<FacetFilter> facetFilters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * L'identifiant du noeud racine de l'arbre syntaxique de cette requete.
     */
    ROOT_ID((short)1, "rootId"),
    /**
     * Liste des noeuds composant l'arbre.
     */
    QUERY_TREE_NODES((short)2, "queryTreeNodes"),
    /**
     * Liste de filtres sur les facettes
     */
    FACET_FILTERS((short)3, "facetFilters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOT_ID
          return ROOT_ID;
        case 2: // QUERY_TREE_NODES
          return QUERY_TREE_NODES;
        case 3: // FACET_FILTERS
          return FACET_FILTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROOTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_TREE_NODES, new org.apache.thrift.meta_data.FieldMetaData("queryTreeNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryTreeNode.class))));
    tmpMap.put(_Fields.FACET_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("facetFilters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetFilter.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Query.class, metaDataMap);
  }

  public Query() {
  }

  public Query(
    int rootId,
    List<QueryTreeNode> queryTreeNodes,
    List<FacetFilter> facetFilters)
  {
    this();
    this.rootId = rootId;
    setRootIdIsSet(true);
    this.queryTreeNodes = queryTreeNodes;
    this.facetFilters = facetFilters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Query(Query other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rootId = other.rootId;
    if (other.isSetQueryTreeNodes()) {
      List<QueryTreeNode> __this__queryTreeNodes = new ArrayList<QueryTreeNode>();
      for (QueryTreeNode other_element : other.queryTreeNodes) {
        __this__queryTreeNodes.add(new QueryTreeNode(other_element));
      }
      this.queryTreeNodes = __this__queryTreeNodes;
    }
    if (other.isSetFacetFilters()) {
      List<FacetFilter> __this__facetFilters = new ArrayList<FacetFilter>();
      for (FacetFilter other_element : other.facetFilters) {
        __this__facetFilters.add(new FacetFilter(other_element));
      }
      this.facetFilters = __this__facetFilters;
    }
  }

  public Query deepCopy() {
    return new Query(this);
  }

  @Override
  public void clear() {
    setRootIdIsSet(false);
    this.rootId = 0;
    this.queryTreeNodes = null;
    this.facetFilters = null;
  }

  /**
   * L'identifiant du noeud racine de l'arbre syntaxique de cette requete.
   */
  public int getRootId() {
    return this.rootId;
  }

  /**
   * L'identifiant du noeud racine de l'arbre syntaxique de cette requete.
   */
  public Query setRootId(int rootId) {
    this.rootId = rootId;
    setRootIdIsSet(true);
    return this;
  }

  public void unsetRootId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
  }

  /** Returns true if field rootId is set (has been assigned a value) and false otherwise */
  public boolean isSetRootId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
  }

  public void setRootIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
  }

  public int getQueryTreeNodesSize() {
    return (this.queryTreeNodes == null) ? 0 : this.queryTreeNodes.size();
  }

  public java.util.Iterator<QueryTreeNode> getQueryTreeNodesIterator() {
    return (this.queryTreeNodes == null) ? null : this.queryTreeNodes.iterator();
  }

  public void addToQueryTreeNodes(QueryTreeNode elem) {
    if (this.queryTreeNodes == null) {
      this.queryTreeNodes = new ArrayList<QueryTreeNode>();
    }
    this.queryTreeNodes.add(elem);
  }

  /**
   * Liste des noeuds composant l'arbre.
   */
  public List<QueryTreeNode> getQueryTreeNodes() {
    return this.queryTreeNodes;
  }

  /**
   * Liste des noeuds composant l'arbre.
   */
  public Query setQueryTreeNodes(List<QueryTreeNode> queryTreeNodes) {
    this.queryTreeNodes = queryTreeNodes;
    return this;
  }

  public void unsetQueryTreeNodes() {
    this.queryTreeNodes = null;
  }

  /** Returns true if field queryTreeNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTreeNodes() {
    return this.queryTreeNodes != null;
  }

  public void setQueryTreeNodesIsSet(boolean value) {
    if (!value) {
      this.queryTreeNodes = null;
    }
  }

  public int getFacetFiltersSize() {
    return (this.facetFilters == null) ? 0 : this.facetFilters.size();
  }

  public java.util.Iterator<FacetFilter> getFacetFiltersIterator() {
    return (this.facetFilters == null) ? null : this.facetFilters.iterator();
  }

  public void addToFacetFilters(FacetFilter elem) {
    if (this.facetFilters == null) {
      this.facetFilters = new ArrayList<FacetFilter>();
    }
    this.facetFilters.add(elem);
  }

  /**
   * Liste de filtres sur les facettes
   */
  public List<FacetFilter> getFacetFilters() {
    return this.facetFilters;
  }

  /**
   * Liste de filtres sur les facettes
   */
  public Query setFacetFilters(List<FacetFilter> facetFilters) {
    this.facetFilters = facetFilters;
    return this;
  }

  public void unsetFacetFilters() {
    this.facetFilters = null;
  }

  /** Returns true if field facetFilters is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetFilters() {
    return this.facetFilters != null;
  }

  public void setFacetFiltersIsSet(boolean value) {
    if (!value) {
      this.facetFilters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROOT_ID:
      if (value == null) {
        unsetRootId();
      } else {
        setRootId((Integer)value);
      }
      break;

    case QUERY_TREE_NODES:
      if (value == null) {
        unsetQueryTreeNodes();
      } else {
        setQueryTreeNodes((List<QueryTreeNode>)value);
      }
      break;

    case FACET_FILTERS:
      if (value == null) {
        unsetFacetFilters();
      } else {
        setFacetFilters((List<FacetFilter>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOT_ID:
      return Integer.valueOf(getRootId());

    case QUERY_TREE_NODES:
      return getQueryTreeNodes();

    case FACET_FILTERS:
      return getFacetFilters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROOT_ID:
      return isSetRootId();
    case QUERY_TREE_NODES:
      return isSetQueryTreeNodes();
    case FACET_FILTERS:
      return isSetFacetFilters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Query)
      return this.equals((Query)that);
    return false;
  }

  public boolean equals(Query that) {
    if (that == null)
      return false;

    boolean this_present_rootId = true;
    boolean that_present_rootId = true;
    if (this_present_rootId || that_present_rootId) {
      if (!(this_present_rootId && that_present_rootId))
        return false;
      if (this.rootId != that.rootId)
        return false;
    }

    boolean this_present_queryTreeNodes = true && this.isSetQueryTreeNodes();
    boolean that_present_queryTreeNodes = true && that.isSetQueryTreeNodes();
    if (this_present_queryTreeNodes || that_present_queryTreeNodes) {
      if (!(this_present_queryTreeNodes && that_present_queryTreeNodes))
        return false;
      if (!this.queryTreeNodes.equals(that.queryTreeNodes))
        return false;
    }

    boolean this_present_facetFilters = true && this.isSetFacetFilters();
    boolean that_present_facetFilters = true && that.isSetFacetFilters();
    if (this_present_facetFilters || that_present_facetFilters) {
      if (!(this_present_facetFilters && that_present_facetFilters))
        return false;
      if (!this.facetFilters.equals(that.facetFilters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_rootId = true;
    builder.append(present_rootId);
    if (present_rootId)
      builder.append(rootId);

    boolean present_queryTreeNodes = true && (isSetQueryTreeNodes());
    builder.append(present_queryTreeNodes);
    if (present_queryTreeNodes)
      builder.append(queryTreeNodes);

    boolean present_facetFilters = true && (isSetFacetFilters());
    builder.append(present_facetFilters);
    if (present_facetFilters)
      builder.append(facetFilters);

    return builder.toHashCode();
  }

  public int compareTo(Query other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Query typedOther = (Query)other;

    lastComparison = Boolean.valueOf(isSetRootId()).compareTo(typedOther.isSetRootId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootId, typedOther.rootId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryTreeNodes()).compareTo(typedOther.isSetQueryTreeNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTreeNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryTreeNodes, typedOther.queryTreeNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetFilters()).compareTo(typedOther.isSetFacetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetFilters, typedOther.facetFilters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Query(");
    boolean first = true;

    sb.append("rootId:");
    sb.append(this.rootId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryTreeNodes:");
    if (this.queryTreeNodes == null) {
      sb.append("null");
    } else {
      sb.append(this.queryTreeNodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetFilters:");
    if (this.facetFilters == null) {
      sb.append("null");
    } else {
      sb.append(this.facetFilters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStandardSchemeFactory implements SchemeFactory {
    public QueryStandardScheme getScheme() {
      return new QueryStandardScheme();
    }
  }

  private static class QueryStandardScheme extends StandardScheme<Query> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Query struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rootId = iprot.readI32();
              struct.setRootIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_TREE_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.queryTreeNodes = new ArrayList<QueryTreeNode>(_list120.size);
                for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                {
                  QueryTreeNode _elem122; // required
                  _elem122 = new QueryTreeNode();
                  _elem122.read(iprot);
                  struct.queryTreeNodes.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setQueryTreeNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACET_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                struct.facetFilters = new ArrayList<FacetFilter>(_list123.size);
                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                {
                  FacetFilter _elem125; // required
                  _elem125 = new FacetFilter();
                  _elem125.read(iprot);
                  struct.facetFilters.add(_elem125);
                }
                iprot.readListEnd();
              }
              struct.setFacetFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Query struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
      oprot.writeI32(struct.rootId);
      oprot.writeFieldEnd();
      if (struct.queryTreeNodes != null) {
        oprot.writeFieldBegin(QUERY_TREE_NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.queryTreeNodes.size()));
          for (QueryTreeNode _iter126 : struct.queryTreeNodes)
          {
            _iter126.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.facetFilters != null) {
        oprot.writeFieldBegin(FACET_FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facetFilters.size()));
          for (FacetFilter _iter127 : struct.facetFilters)
          {
            _iter127.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTupleSchemeFactory implements SchemeFactory {
    public QueryTupleScheme getScheme() {
      return new QueryTupleScheme();
    }
  }

  private static class QueryTupleScheme extends TupleScheme<Query> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRootId()) {
        optionals.set(0);
      }
      if (struct.isSetQueryTreeNodes()) {
        optionals.set(1);
      }
      if (struct.isSetFacetFilters()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRootId()) {
        oprot.writeI32(struct.rootId);
      }
      if (struct.isSetQueryTreeNodes()) {
        {
          oprot.writeI32(struct.queryTreeNodes.size());
          for (QueryTreeNode _iter128 : struct.queryTreeNodes)
          {
            _iter128.write(oprot);
          }
        }
      }
      if (struct.isSetFacetFilters()) {
        {
          oprot.writeI32(struct.facetFilters.size());
          for (FacetFilter _iter129 : struct.facetFilters)
          {
            _iter129.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Query struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.rootId = iprot.readI32();
        struct.setRootIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.queryTreeNodes = new ArrayList<QueryTreeNode>(_list130.size);
          for (int _i131 = 0; _i131 < _list130.size; ++_i131)
          {
            QueryTreeNode _elem132; // required
            _elem132 = new QueryTreeNode();
            _elem132.read(iprot);
            struct.queryTreeNodes.add(_elem132);
          }
        }
        struct.setQueryTreeNodesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facetFilters = new ArrayList<FacetFilter>(_list133.size);
          for (int _i134 = 0; _i134 < _list133.size; ++_i134)
          {
            FacetFilter _elem135; // required
            _elem135 = new FacetFilter();
            _elem135.read(iprot);
            struct.facetFilters.add(_elem135);
          }
        }
        struct.setFacetFiltersIsSet(true);
      }
    }
  }

}

